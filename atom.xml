<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://JamieDummy.github.io</id>
    <title>FakeC0de&apos;s ROOM</title>
    <updated>2020-02-25T16:13:08.017Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://JamieDummy.github.io"/>
    <link rel="self" href="https://JamieDummy.github.io/atom.xml"/>
    <subtitle>「嘘は真実の影」</subtitle>
    <logo>https://JamieDummy.github.io/images/avatar.png</logo>
    <icon>https://JamieDummy.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, FakeC0de&apos;s ROOM</rights>
    <entry>
        <title type="html"><![CDATA[The Guides Axiom 完整向流程]]></title>
        <id>https://JamieDummy.github.io/post/the-guides-axiom-wan-zheng-xiang-liu-cheng-part1/</id>
        <link href="https://JamieDummy.github.io/post/the-guides-axiom-wan-zheng-xiang-liu-cheng-part1/">
        </link>
        <updated>2020-02-25T13:13:24.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>注：本流程为个人兴趣原创 对应版本为Axiom 4.0 版本</p>
</blockquote>
<h1 id="基础知识">基础知识</h1>
<blockquote>
<p>注：游戏是个十分精彩的游戏 初见强烈建议阅读完【基础知识】后先直接游玩一周目 实在遇到困难后再查阅本流程</p>
</blockquote>
<h3 id="凯撒密码">凯撒密码</h3>
<p>它是一种代换密码。据说凯撒是率先使用加密函的古代将领之一，因此这种加密方法被称为恺撒密码。</p>
<p>凯撒密码作为一种最为古老的对称加密体制，在古罗马的时候都已经很流行，他的基本思想是：通过把字母移动一定的位数来实现加密和解密。明文中的所有字母都在字母表上向后（或向前）按照一个固定数目进行偏移后被替换成密文。例如，当偏移量是3的时候，所有的字母A将被替换成D，B变成E，以此类推X将变成A，Y变成B，Z变成C。由此可见，位数就是凯撒密码加密和解密的密钥。</p>
<h3 id="base64加密">Base64加密</h3>
<p>Base64是网络上最常见的用于传输8Bit字节码的编码方式之一，Base64就是一种基于64个可打印字符来表示二进制数据的方法。可查看RFC2045～RFC2049，上面有MIME的详细规范。</p>
<p>Base64编码是从二进制到字符的过程，可用于在HTTP环境下传递较长的标识信息。例如，在Java Persistence系统Hibernate中，就采用了Base64来将一个较长的唯一标识符（一般为128-bit的UUID）编码为一个字符串，用作HTTP表单和HTTP GET_URL中的参数。在其他应用程序中，也常常需要把二进制数据编码为适合放在URL（包括隐藏表单域）中的形式。此时，采用Base64编码具有不可读性，需要解码后才能阅读。</p>
<h3 id="旗语">旗语</h3>
<p>手旗旗语是一种海上通信方式。适用于白天、距离较近且视距良好的情况下。夜间距离较近时，一般使用灯光通信。</p>
<p>手旗通信需要使用两面旗子，信号兵每手各持一面旗子，站在舷边较高较突出的部位，通过旗子相对于身体的不同位置，表达着不同的字母和符号。几个拼音字母组成一个字，若干个字组成一个意思。手旗还可以为本舰（船）放下的小艇指示方向。</p>
<p>旗语指示表如下：</p>
<p>旗语对照表</p>
<h3 id="罗马数字简易拼读攻略">罗马数字简易拼读攻略</h3>
<p>罗马数字是阿拉伯数字传入之前使用的一种数码。罗马数字采用七个罗马字母作数字、即Ⅰ（1）、X（10）、C（100）、M（1000）、V（5）、L（50）、D（500）。记数的方法：</p>
<p>相同的数字连写，所表示的数等于这些数字相加得到的数，如 Ⅲ=3；</p>
<p>小的数字在大的数字的右边，所表示的数等于这些数字相加得到的数，如 Ⅷ=8、Ⅻ=12；</p>
<p>小的数字（限于 Ⅰ、X 和 C）在大的数字的左边，所表示的数等于大数减小数得到的数，如 Ⅳ=4、Ⅸ=9；</p>
<h3 id="二进制解码说明">二进制解码说明</h3>
<p>本游戏中的二进制解码，实际使用的是ASCII码表进行的加密，也就是说每一个字母或者数字对应的二进制码都是其ASCII码在二进制中的数字 具体对照表如下：</p>
<p>二进制解码表</p>
<h3 id="摩斯电码">摩斯电码</h3>
<p>摩斯密码（Morse code）是一种时通时断的信号代码，通过不同的排列顺序来表达不同的英文字母、数字和标点符号。 摩斯电码是一种早期的数字化通信形式，但是它不同于现代只使用零和一两种状态的二进制代码，它的代码包括五种： 点、划、点和划之间的停顿、每个词之间中等的停顿以及句子之间长的停顿。</p>
<p>简明对照表如下：</p>
<p>摩斯电码表</p>
<h1 id="剧情关卡">剧情关卡</h1>
<p>注：以下按照关卡线梳理 关卡解锁线如开头大图所示</p>
<ol>
<li>
<p>点击圆圈即可</p>
</li>
<li>
<p>依次点击三个圆圈</p>
</li>
<li>
<p>将五个都点亮即可</p>
</li>
<li>
<p>根据提示 输入input 开启游戏的【输入】功能</p>
</li>
<li>
<p>点击圆圈可以看到14454的数字显示 根据指示输入14454</p>
</li>
<li>
<p>点击上方的Y/N 选项无碍游戏结果</p>
</li>
<li>
<p>将上方五个光点盘旋转至对应即可</p>
</li>
<li>
<p>输入14454 可通过上方的按键或者下方的文本输入</p>
</li>
<li>
<p>观察后可以发现实心代表1 空心代表0 填入即可</p>
</li>
<li>
<p>发现上方显示有一串二进制代码 通过键盘输入区新解锁的【二进制解码】得到答案wait（其实直接使用ASCII码表手动解码也是可以的 下同）</p>
</li>
<li>
<p>根据上方光点包络显示输入node 即可开启「游戏关卡（即node）」概念（此时仍不能选关）</p>
</li>
<li>
<p>点击上方activate字样按钮 即可激活（activate）游戏的【选关功能】</p>
</li>
<li>
<p>13在开始是锁住的 点击发现本关和第九关有关联 回到第九关 在第九关中出现了二进制代码 那么 将之前填进来的0和1代入（直接填入只会再次激活第10关）得到：</p>
<pre><code>01101001        i
01101110        n
01110110        v
01100101        e
01110010        r
01110100        t
01100101        e
01100100        d
</code></pre>
</li>
</ol>
<p>得到答案inverted（反转）在第九关中输入解锁第13关 而根据inverted（反转）的提示 将本关中的数字全部反转后解码可以得到vertical即为本关答案</p>
<ol start="14">
<li>
<p>留意到文件中黄色马克笔标记的部分 拼合起来可以得到pause（暂停）</p>
</li>
<li>
<p>相机功能解锁（和pause对应）利用【拍照截图】功能查看截图获得save即为答案</p>
</li>
<li>
<p>本关包含三重谜题 按照剧情我们先只解开一重 注意到照片最上方的4行黑白指示灯 对应黑1白0可以解码得到echo 输入即可过关 同时记得用相机记录截图</p>
</li>
<li>
<p>查看16关照片后 将照片中圈出并标有「17」的位置和这一关对应（白点为点亮）即可过关</p>
</li>
<li>
<p>18关紧承17关 将本关点亮的部分看成1 黑暗的部分看成0 解码后可得hint即为答案 此时解锁游戏内的提示系统</p>
</li>
<li>
<p>双击放大并观察文件内容 可以发现有部分字母下被加了点 拼接起来得到integrated（整体的）即为答案 同时记得给本关拍照 之后会用上</p>
</li>
<li>
<p>第一眼发现有三种信息：数字 小写字母和大写字母 数字和小写字母暂时无法解读出信息 按下不表之后再说 整合大写字母 得到TRIAL（尝试）即为答案</p>
</li>
<li>
<p>这关五个按钮明显对应于TRIAL的五个字母 调整至相同即可 注意 第一个按钮控制第二个显示 第二个按钮控制第三个显示 以此类推</p>
</li>
<li>
<p>21关提示中提到「trial and error（尝试与失败）」所以本关很明显是要拼出trial 注意 本关中按一个按钮在初见第一次按下时只改变一个之后 每按一下就会影响自身右边的内容 所以 小心点</p>
</li>
<li>
<p>根据21关的提示 本关应该是要拼出error 规则依旧是点击改变 不过这次改变的是包括自身和右侧的字母 所以基本逻辑不变 点击拼出error 过关</p>
</li>
<li>
<p>这一关看到这么多圆盘 根据提示orientation（朝向）可以得到无外乎就是两种大类结果：a)全部统一指向一个方位 b)全部指向同一个点 继续点击可以发现中间的圆盘构造不同且无法点击 很明显暗示了答案为后一种 且指向为「同色+指向中心」 得出答案 将圆盘棕色部分转向中心点即可</p>
</li>
<li>
<p>本关信息丰富 我们先谈过关剧情：右滑得到提示「一个照相机图标」提示显而易见 用拍照功能拍下本关查看截图会发现其他部分小时只显示LETTERS字母  输入过关</p>
</li>
<li>
<p>根据正文提示「counted the number of letters」将下方的数字转换成字母得到答案facade（外表/外观）</p>
</li>
<li>
<p>看到数字 类比上关 做同样处理 将数字转换成字母得到sides（也可以把数字输入新的【数字-<strong>字母解码器】</strong>，更方便）</p>
</li>
<li>
<p>看到图形 联想到这几关的连续性 所以下意识考虑相关的可能性 而能联系起来这些的无非是这些几何图形的边数或者角数 圆没有对应的内角所以角数这个思路走不通 将边数转换成数字：313854 转换后得到cached</p>
</li>
<li>
<p>本关为游戏主线关键线索关（参考流程图中的复杂程度也可以看出）本关的中间的九个键盘一定是表示九位数字的 顺序暂且不看（其实就是最简单的从上至下顺序） 先看右滑的提示：Data Scheme Entry 可以知道 本关需要四个六位密码组合也就是四个数据组成部分 寻找提示中对应的有「Data Scheme *」字样的关卡可以得到分别为26 28 35 59（注意 如果你是顺序玩到这的 你的35和59还尚未解锁 不用担心 等后续打到对应关卡后再回来输入也来得及）分别解锁81 82 83 84四关完成每一关的拼图后可以点亮本关对应的一个灯 置于答案是什么之后在59关会加以总结 此处先不提</p>
</li>
<li>
<p>在解锁81-84关的同时注意到每一关在点击按钮后下方会出现一个二进制数字：</p>
<pre><code>00110100
00110010
00110101
00110001
</code></pre>
</li>
</ol>
<p>收集四组数字并解码 得到4251即为本关答案 输入解锁第100关「待制作」空白页面</p>
<ol start="31">
<li>
<p>根据13关的提示vertical（垂直的）纵向解码八行二进制数 得到答案capitals</p>
</li>
<li>
<p>根据31关提示capitals（大写字母）将文档中的大写字母组合起来获得答案SUBTRACT（减法）</p>
</li>
<li>
<p>右滑发现提示为7 输出每一行的点 分别为：12 26 10 转换为字母为lzj 据此猜测此关为凯撒密码关（皮质关卡背景也可以作为提示）利用新解锁的【凯撒密码解码器】以步长为7进行解码（也可自己手动解码 参考基础知识部分） 得到答案esc</p>
</li>
<li>
<p>箭头指向左上空白 没有其他有效的提示 所以想到将场景拍照 查看截图会发现大量信息 根据箭头所指 输入答案numerals（数字符号）</p>
</li>
<li>
<p>根据基础知识中的方法将罗马数字转换成数字为453145 转换成字母后为本关答案 decade 同时本关提示为Data Scheme 3 因此根据29关提示可讲对应六位密码填入29关</p>
</li>
<li>
<p>本关有10个点 结合上一关提示decade（十年）和「数字符号」和「罗马数字」的提示可以得到本关答案为罗马数字的10 也就是X</p>
</li>
<li>
<p>右滑提示显示「key=」也就是说上一关的答案X为本关的key 结合密码部分的钥匙可以得到密码为XCVI 转换罗马数字位数字 得到96 输入即可来到96关</p>
</li>
<li>
<p>根据96关的结果回到了38关 已知的答案1009无法转换成字母（0不对应字母）因而想到转换成罗马数字 得到本关答案MIX（混合）</p>
</li>
<li>
<p>本关没有提示 但是稍加观察会发现密码盘中闪烁的数字大多落在同一个序列内 用拍照功能记录显示并查看截图 得到数字 20 04 01 01（或者其他顺序 但一定都是这个序列中四个元素的一种排列方式） 转换成字母为TDAA调整一下字母顺序得到答案DATA（数据）</p>
</li>
<li>
<p>文档标题为ALPHANUMERIC INDEX DATA（字母数字表索引数据） 因而可知下面的表格每一个格子对应一个字母 之后每个格子对应0-9的数字 按顺序数下来并加以记录就是了 得到empty</p>
</li>
<li>
<p>本关为全游戏信息量最大的一关 初始状态下点阵蒙版停留在中心 可向八个方向滑动 先保持初始的中心状态 记录二进制码：</p>
<pre><code>01110011        s
01101000        h
01101001        i
01100110        f
01110100        t
01101001        i
01101110        n
01100111        g
</code></pre>
</li>
</ol>
<p>解码后得到答案为shifting</p>
<p>本关其余部分的解码信息记录如下所示：</p>
<pre><code>左上：红色 83 85 77 —— 按字母表循环计数可得到SUM
左中：白色 opposite —— 将白色作为1黑色作为0 从右向左记录
左下：棕黄 alphabet —— 棕黄色为1
中上：灰色 outlined —— 将亮起的部分看作1
中下：棕黄 patterns —— 棕黄色为1
右上：红色 83 73 88 ——按字母表循环计数可得到SIX
右中：白色 backward —— 白点为1得到drawkcab 模仿左中反向阅读
右下：白色 mnemonic —— 解码得到uvmuwvqk 以8为步长进行凯撒解码得到mnemonic（助记的）
</code></pre>
<ol start="43">
<li>
<p>注意到文档下方的点阵 转换成字母可以得到本关答案 rotate（旋转）同时注意到文档中「Three is next」一句被划线了说明本句和下一关有关</p>
</li>
<li>
<p>本关出现了一个星罗盘 右滑看到提示为IRXU 点击圆盘转动较小的轮盘直到中间显示为3 将IRXU对应到内侧轮盘并合外盘相对应读取 得到本关答案FOUR</p>
</li>
<li>
<p>看到中间的字母为QMRYW 结合上一关的4 用凯撒解码得到答案为minus</p>
</li>
<li>
<p>和40关类似 不同的是本关下方多了一行手写体文字：Minus indicates key value 意思为「减法指示了密钥值」查看表可以看到一个位置上被标注了短横杠 也就是所谓的「减号」先读出字母值：gijkv 用减号指示的密钥2进行凯撒解码得到eight即为本关答案</p>
</li>
<li>
<p>右滑查看提示得到Primary Network Link：41 因而回到41关根据箭头向右下滑动得到mnemonic即为本关答案</p>
</li>
<li>
<p>根据46关解码得到的eight和47关的「助记符」 先将数字串13 12 23 11转换成字母MLWK 利用8为步长进行凯撒解码得到答案EDOC</p>
</li>
<li>
<p>根据首字母拼出答案为previous（之前的/以前的）即为本关答案 输入后跳转回48关</p>
</li>
<li>
<p>右滑得到提示序列：(2, 5)(4, 2)(2, 4)(5, 1)(4, 1)左滑谜题部分可以发现一张对照表 对照进行翻译可以得到答案为WIRED（奇怪的）同时拍照记录下这张解码表和谜题部分的颜色表 后续会用上</p>
</li>
<li>
<p>根据50关的颜色和码表对应提示 本关的提示为颜色连线 其实就是把数字对转换成了颜色对 解码过程还是一样的 解码得到答案logic（逻辑）</p>
</li>
<li>
<p>本关的提示为pattern 本关的目标就是找出上方光圈阵列的模式 本关的前四个光圈显示看似是随机的 但一定满足两个模式： a) 最外层亮着的光圈一定是按照从内向外123123123这样循环的顺序的 b)最外层光圈亮光的方向是顺时针的 以下图的情况为例：</p>
</li>
</ol>
<p>因而只要按规律填写出最后一个就行了</p>
<ol start="54">
<li>
<p>向右滑查看提示看到一串摩斯电码 直接进行解码得到TEMPEST（暴风雨/异动）</p>
</li>
<li>
<p>正上方简单直白地显示了一串摩斯电码 解码后得到本关答案TONE</p>
</li>
<li>
<p>倾听上方的电码声音（不听也行 上方已经可视化显示出来了） 解码得到- - -/.-./…解码后得到OPS</p>
</li>
<li>
<p>右滑提示Primary Network Link：41 再次返回41关 向右滑动点阵并解码 得到drawkcab 反向后（也和单词本身backward对应）得到答案backward</p>
</li>
<li>
<p>本关是文字游戏 看到所述：“After looking everywhere, the solution was located in a drawer. It was simply filed in reverse.”  因而直接将DRAWER作为本体 反向（reverse）后即可得到reward</p>
</li>
</ol>
<p>另外 根据第二段的描述可知  下一关里也要用到同样的处理方式“反向（reverse）”</p>
<ol start="59">
<li>由58关提示“反向”可知，将数字反向得到453945，对应成字母得到本关答案“DECIDE”，再由本关提示Data Scheme 4以及29关的提示Data Scheme Entry ，可将453945输入第29关</li>
</ol>
<p>综上可得29关对应的四个密码：</p>
<pre><code>26关：613145
28关：313854
35关：453145
59关：453945
</code></pre>
<ol start="60">
<li>
<p>任意点击大白点点亮所有小白点即可完成 同时解锁61</p>
</li>
<li>
<p>右滑显示Network Link：57 回到57关获得提示“backward”因而将数字指示反向</p>
<pre><code>01100011
01101111
01101110
01110110
01100101
01110010
01100111
01100101
</code></pre>
</li>
</ol>
<p>最后获得正确答案converge</p>
<ol start="62">
<li>
<p>观察画面 可以发现在文件信息里的auth一行上有删除线 同时右侧看似有两层信息 点开拍照页面（但不要拍照）会发现在红色的滤光镜下会显示六个数字：03 01 14 25 15 14 转换成字母的到单词canyon 输入进入63关</p>
</li>
<li>
<p>摩斯电码 但是请注意 右滑依旧会发现仍就指向57关 所以此关依旧要反向 解码得到结果timed</p>
</li>
<li>
<p>点击中间的亮点使得旋转部分和高亮部分重合即可 一共需要点击三次 成功后解锁66</p>
</li>
<li>
<p>从内向外数每个环的节数 分别为5 6 6 1 3 5 转换成字母efface（抹掉） 输入解锁67</p>
</li>
<li>
<p>类似的场景再次出现 不过此次显示的是向左的箭头 结合41关的提示 左中表示opposite（相反） 输入即可过关 进入68</p>
</li>
<li>
<p>根据前一关的提示opposite 此关中不再是红色相对应而是采用红色和棕黄色相对应 一一对应后解锁69</p>
</li>
<li>
<p>空白页面</p>
</li>
</ol>
<p>81-84. 这几关都是普通拼图关 通过旋转拼图来完成 完成后会亮起按钮 按下后下方会显示二进制码 并点亮29关的对应指示灯</p>
<ol start="96">
<li>
<p>本关由四个数字组成 中间部分已出现为96 两边未知 右滑后显示「？？？？」 将下方按钮按灭 此时「？？？？」转换为「A<em>I」同时再向左滑动得到「IF」合起来可以得到「AIIF」和「96</em>」对照起来看可以得到两边的数字为1和9 因为中间已经出现了所以用0代替 所以本关答案为1009 输入即可跳回38关</p>
</li>
<li>
<p>本关为「未完成」空白页面</p>
</li>
</ol>
<h1 id="金圈解锁">金圈解锁</h1>
<blockquote>
<p>注：本篇中徽章一律采用 A-Z 描述 A-Z 仅表示徽章所在位置的顺序 若有某两个徽章之间存在空缺 依旧以字母顺序标注空缺</p>
</blockquote>
<ol start="8">
<li>
<p>注意到页面中间有一串 [2,1, 13, 2] 同时右滑看到R(8)可得到解密密钥为8 先将数字转换成字母BAMB 再利用凯撒解码步长为8 得到TSET 反向得到金圈答案test 解锁徽章S2</p>
</li>
<li>
<p>根据第十关的右滑提示Preview 在选关界面观察第十关的缩略图得到两行二进制数 解码得到illusion（幻觉）即为本关金圈答案 解锁徽章S14</p>
</li>
<li>
<p>右滑看到snapshot 所以直接用相机对本关进行截图并查看截图 可以得到本关金圈答案 page 解锁徽章S6</p>
</li>
<li>
<p>右滑得到提示Preview 依旧是观察关卡缩略图 得到新代码 16 12 1 14 转换成英文即plan 输入后解锁徽章S7</p>
</li>
<li>
<p>这关有三个金圈要素</p>
<pre><code>  1：相机拍照截图看到桌上指示灯阵列变了 记录形成的二进制解码 得到第一个金圈答案proposal 解锁徽章S1
  2：中间偏上位置的八个仪表盘是不是觉得眼熟？没错 和44关的星罗盘是对应的 对应后得到TWOSEVEN 解锁徽章S11
  3：中间的五个仪表盘指示的是旗语 根据基础知识里的对照表 得到最后结果为qubit（量子比特）输入后解锁徽章S21
</code></pre>
</li>
<li>
<p>缩略图中的光点阵列和实际关卡并不一致 记录并解码二进制编码：</p>
<pre><code>    1001100
    1011000
    1001001
    1010110
</code></pre>
</li>
</ol>
<p>得到LXIV 将罗马数字转化成数字为64 即为本关金圈答案 输入后解锁徽章S9</p>
<ol start="20">
<li>
<p>右滑提示为Lowercase 因而得到应为小写字母 记录小写字母（参见上一部分对应关卡图）得到kyvfip 同时注意到数字部分 以字母为分隔符 将数字转换成字母得到seventeen（17） 以此为密钥 凯撒解码得到theory 即为本关金圈答案 输入后解锁徽章S3</p>
</li>
<li>
<p>将LETTER剩下的字母拿出来是DBOKDSCO 注意到字母上下共有十个点 再没有其他信息也不能将10个点考虑成11111和11111这样解码的情况下 考虑凯撒密码步长为10 得到TREATISE即为本关金圈答案 输入解锁徽章S5</p>
</li>
<li>
<p>右滑提示为「#」 注意到#号在游戏中文件出现的地方 回溯到徽章E所展示的文件下方有一个#号标注的数字 在30关输入这串数字可以解锁徽章S17</p>
</li>
<li>
<p>考虑所有点共48个并且分成了三行 考虑到提示「减法」48-3=45 输入45即为金圈答案 解锁徽章S10</p>
</li>
<li>
<p>此关需要分开看 将key看作一部分 作为凯撒密码的key（游戏玩到这个程度了只要判别出将key作为密码那么本能联想到凯撒也是理所当然的吧） 将后半部分的CVI用10为单位进行凯撒解码得到sly（狡猾的） 即为本关金圈 输入解锁徽章S15</p>
</li>
<li>
<p>此关的金圈巨坑 注意观察COMFEED下面的闪烁光标 会发现这个闪烁很有节奏 没错 这是摩斯电码（……）记录密码：-.. . …解码后得到DES（数据加密标准，data encryption standard）即为本关金圈 输入解锁徽章S19</p>
</li>
<li>
<p>注意到下面的“Memorandum No.”了么 没错 将之前的几片</p>
</li>
</ol>
<p>“bG 1/4（26关）”“9v 2/4（43关）”“cA 3/4（49关）”“== 4/4（本关）”集合在一起 并合并前面的字母数字项：</p>
<pre><code>    bG9vcA==
</code></pre>
<p>根据最后的两个==可以猜测为Base64解码 通过Base64解码（游戏中并没有给出直接解码器 可自行搜索相应在线解码工具）使用Base64解码后得到loop即为本关金圈答案 输入后解锁徽章S22</p>
<ol start="62">
<li>本关为Guide联动关卡 首先需要下载Guide（也就是前作） 下载后点击任一关卡 调整查看decode工具 找到标记为“==”的工具 在62关中 我们利用的是auth栏中的第一层（即六个数字代码）仔细观察会发现底层还藏有代码“aW1tYW5lbnQ=” 忽略“=”号后将代码输入decoder中 可以得到immnent 返回Axiom 输入即可解锁勋章关S23</li>
</ol>
<h1 id="黑客部分">黑客部分</h1>
<ol start="5">
<li>
<p>将14454转换成字母后输入added 可解锁后门h5</p>
</li>
<li>
<p>将文件中给出的ip地址2.1.13.2直接连接成一体得到21132 输入可解锁后门h7</p>
</li>
<li>
<p>按照18关的缩略图点亮17关的图案可以解锁后门h1</p>
</li>
<li>
<p>直接输入解码密钥seventeen即可解锁后门h2</p>
</li>
<li>
<p>对照本关的缩略图你会再次发现不一致的地方 没有错 这一关还有猫腻 将缩略图显示部分调整至和缩略图一致 会解锁后门h3</p>
</li>
<li>
<p>本关直接输入转换前数字10的话可解锁后门h6</p>
</li>
<li>
<p>观察auth栏没有被重叠而被遮挡的部分 可以找到atlas 解锁后门h9</p>
</li>
<li>
<p>输入转换前的内容 即“demit” 解锁后门h10</p>
</li>
</ol>
<h1 id="expansion-pack-1部分">Expansion pack 1部分</h1>
<p>e1. 类比于40关 参考本关标题即解码得到答案BEGINS</p>
<p>e2. 首先看到序列43 9 40 7 63 5 17 乍看上去既无法直接解码也无法和26个字母直接扯上关系 所以开始考虑在关    卡内搜寻线索 将上方的句子看作一串序列（空格不算） 将下方序列对应上方位置 得到答案arbiter（仲裁者/裁决人）</p>
<p>e3. 先观察画面 画面虽然是不断闪现的字母 但是会在某一个时刻停留并且高亮显示某些字母 所以答案也就很明显了 用相机功能在画面暂停的时候截图 找到高亮显示的字母并重新组合的到达啊了symbolic（象征的/符号的）</p>
<p>e4. 这是个单词量测试题 将每个物品对应单词的首字母连接起来</p>
<pre><code>Pawn（国际象棋中的卒）
Anchor（锚）
Target（目标）
Hourglass（沙漏）
</code></pre>
<p>连起来得到答案PATH</p>
<p>e5. 以同时标有圆点和方向的圆圈为起点（本关起点随机产生） 每个按钮中一个箭头代表一步两个箭头表示两步 从左上按按钮指示的路线（path）依次按遍整个按钮直到中心</p>
<p>e6. 先按下方的空白缺口对准头两个空白圆头 再根据下半部分拼出对应的上半部分圆头 注意 不是一个完整的序列的话是不符合要求的 提示也已经说明了</p>
<p>e7. 本关紧接e6 根据e6的组合结果 对图案进行解码：00110101 转换得到5</p>
<p>e8. 本关紧接e7 本关右滑提示为E 根据e7的答案提示 返回e5 查看当时的路线并和本关进行对应 得到结果为retracing（追溯，和本关解题过程对应）</p>
<p>e9. 右滑提示为「TK-G/303」那么就应该寻找有这一标记的文件 追溯到正篇第19关文件编号正是「TK-G/303」 观察到左下角有一个图案且下方标黑点 说明应为起点 对应在e9中滑动出这一路线即可过关</p>
<p>e10. 根据每个圆环中的颜色点提示 直接排列成一排即可</p>
<p>e11. 点击某一点会改变自身和自身周围四个方向（如果有的话）的指示灯颜色 全部点亮（activate）即可 最快解决方案：四个角点一下然后正中间点一下</p>
<p>e12. 本关一共有12个电路接头转盘 每两个为一组 两个开关控制一个芯片的开关 直接调整方向使得六块芯片点亮即可 点击即可解锁slp.dat 点击可观察到剧情 至此全部Extra 1关卡完成.</p>
<h1 id="expansion-pack-2部分">Expansion pack 2部分</h1>
<p>e13. 按照颜色排列上方对应字母 得到答案vantage</p>
<p>e14. 晃动手机可以发现有一个图层是可以上下移动的 所以晃动手机 将运动图层的小白块和固定涂层的白线缺口对齐 此时可以选择自带相机截图 从下方侧面观察截图 可以发现图案中间藏有答案obscure（模糊的）</p>
<p>e15. 将每个九宫格看成从a到i的九个字母的排列 将缺口处当成对应字母 得到答案abide</p>
<p>e16. 观察到九宫格可以发现很眼熟 结合前一关的结果 直接将abide转换成对应的位置输入：1/2/9/4/5（从上到下+从左到右）</p>
<p>e17. 旋转轮盘 将对应颜色圆点对应起来即可通关</p>
<p>e18. 将对应的每一堆方块数出来：4 1 18 11 转换成对应的字母 得到本关答案：dark</p>
<p>e19. 观察到了熟悉的箭头 此时可以下意识回到41关进行查询 得到答案outlined（轮廓）</p>
<p>e20. 结合前一关的答案 本关答案应该和这个outlined有关观察到左侧的数字框里有部分数字被打上了轮廓：15 18 4 9 14 1 12 转换成字母得到答案ordinal（顺序 次序）</p>
<p>e21. 滑动查看代码页面 可以看到六个卫星部件的名称 将其和主页面的图中的部件进行对应 将123456替换成对应的字母 得到答案import</p>
<p>e22. 页面右上角显示e2.15 得到此关应该和e15有关 回到e15关 看到一串数字：1 2 9 4 5 将其和本关的对应表对应起来 得到答案parse（解析）</p>
<p>e23. 本关存在迷惑性 输入框显示可输入 所以很多人会以为是可以输入的 但实际上不要受此影响 观察到左侧数字为75146 分别直接点击右侧解码表中的对应位置 即可通过本关</p>
<p>e24. 本关和e12基本相同 旋转连接阀门使得所有阀门点亮所有芯片 即可解锁文件mnd.dat 点击看完剧情即可完成整个Expansion pack 2. END.</p>
<h1 id="其他解锁部分">其他解锁部分</h1>
<ol>
<li>
<p>在徽章部分解锁完徽章S1/S2/S3后徽章S4会亮起 此时点击徽章S4的灰点即可解锁徽章S4 同理 在解锁完徽章S5/S6/S7之后徽章S8会亮起 点击即可解锁徽章S8</p>
</li>
<li>
<p>徽章S9/S10/S11解锁完成后 徽章S12会亮起 但会提示「Blocked 2 Nodes」此时注意到S9/S10/S11关分别显示的数字：64 45 27 可以联想到寻找对应的关卡 这里注意 64关还尚未开放 因而我们还无法获取64关对应的提示 我们暂且先看后面 45关右滑提示[K] 27关右滑提示[Y] 结合起来看本关答案应该是一个三位单词：*KY 猜一下就能知道 前一个字母应该是S 即SKY 输入即可正式解锁徽章L</p>
</li>
<li>
<p>徽章S21/S22/S23解锁后 徽章S24会亮起 点开后发现需要输入密码 密码包含两组提示：</p>
<pre><code> 钥匙孔 | P1 P2 P3
 钥匙 |  B1 B2 B3
</code></pre>
</li>
</ol>
<p>通过观察可以发现在前面三个勋章关卡里右上角出现了P1 P2 P3的字样 所以可以得知和此相关 得到“钥匙孔”“16 15 2”</p>
<p>在此观察可以发现 每个页面分别亮起了三层盘片 同时每层盘片内的亮起区域都不同 记录下可得到“钥匙”“mdg”</p>
<p>通过一一对应使用凯撒解码（m→16 d→15 g→2）得到结果“woe”即为金圈答案 解锁S24关页面</p>
<ol start="4">
<li>黑客部分在解锁完后门h1/h2/h3后 后门h4会显示可点击状态 点击即可解锁后门h4  同理 在h5/h6/h7后门解锁后 即刻点击解锁后门h8</li>
</ol>
<blockquote>
<p>至此 游戏中的所有内容均已解锁 游戏完成度100% OVER</p>
</blockquote>
<blockquote>
<p>在此再次感谢<a href="https://space.bilibili.com/1555648">@晨风MornWind</a>的大力协助 继续欢迎各位关注这位不知道什么时候会突然更新的up（并不</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[openAI/universe 安装踩雷记录]]></title>
        <id>https://JamieDummy.github.io/post/openaiuniverse-an-zhuang-cai-lei-ji-lu/</id>
        <link href="https://JamieDummy.github.io/post/openaiuniverse-an-zhuang-cai-lei-ji-lu/">
        </link>
        <updated>2020-02-25T09:49:12.000Z</updated>
        <content type="html"><![CDATA[<p>openAi的universe是一个比较有名也比较有意思的以游戏为载体的AI研究平台 但是其对环境要求的苛刻性比我想象中的要严格 因而对踩到的雷加以记录：</p>
<h1 id="环境说明">环境说明</h1>
<p>系统：macOS 10.13.4</p>
<p>python环境：anaconda 3.6版本<br>
安装前gym版本：0.10.5</p>
<h1 id="问题列举">问题列举</h1>
<p>以下列举几种常见问题</p>
<h2 id="pip-安装问题">pip 安装问题</h2>
<p>一般快捷的安装方式是使用</p>
<pre><code>pip install universe
</code></pre>
<p>直接安装 但是存在问题：第一 这样安装完之后是pip上的最新版本没有错 但是引用可能存在问题 第二 这样安装的universe在环境配置上和当前的gym和ppaquette-gym-super-mario这样的库就产生了问题 具体表现为：完美使用pip install安装universe的话会导致gym被强制会滚到0.7.4版本（以统一解决“No module name &quot;gym.benchmarks&quot;”的问题） 但是ppaquette-gym-super-mario的环境要求gym&gt;0.8.0 然后重新安装mario会再次把gym强制更新到0.10.5 如此反复循环</p>
<p>解决第二个问题时如果采用</p>
<pre><code>pip uninstall gym
pip install gym==0.9.0(此处为大于0.8的版本号)
</code></pre>
<p>会导致universe版本要求报错 因为pip版本的universe又要求gym处于一个较低的版本 陷入死循环 除非弃用其中一个<br>
解决办法是采用git clone+pip安装：<br>
先采用git将openAI的主页上的项目clone下来：</p>
<pre><code>git clone https://github.com/openai/universe.git
</code></pre>
<p>clone完成后进入对应目录下使用pip进行安装：</p>
<pre><code>cd universe
pip install -e .
</code></pre>
<p>安装过程中建议魔法上网以确保安装成功率</p>
<h2 id="关于官方guidance的几个说明">关于官方Guidance的几个说明</h2>
<p>还有一点需要说明的是 universe的官方项目主页上的GuideBook是提示使用docker进行build然后加载docker 从而形成一个封闭的universe环境 好处在于docker的依赖性可以确保universe在docker内的有效运行（docker本身可以看成一种类似iso文件的镜像打包 包含了所需要的环境） 缺点在于你无法在全局环境中找到它 也就是使用</p>
<pre><code>pip list
</code></pre>
<p>你是无法看到universe的<br>
官方的目标是要稳定运行universe并且将编程环境限制在docker内部 但是当我们有其他需求的时候单纯靠往docker里重新添加内容不是持久之计 而且对于之前有一定量使用库积累的人来说这种迁移极其困难 所以这种方法在某些情况下是不适合的 解决方法就是参照上述方法使用pip在全局安装universe确保引用性</p>
<h2 id="module-errorno-module-named-gymbenchmarks或其他同类型问题">Module Error/No Module named &quot;gym.benchmarks&quot;或其他同类型问题</h2>
<p>在上述环境中pip安装时极易弹出以下错误：</p>
<pre><code>ImportError: No module named benchmarks
</code></pre>
<p>这是个常见问题 在网络上搜索你会发现问题的来源很简单 gym在后续版本中（更具体来说应该是0.9.6版本之后）就移除了包括gym.benchmarks在内的一系列函数 导致后续版本对universe没有兼容性（这个问题也同时影响到了ppaquette-gym-super-mario）<br>
解决办法是使用上述提到的先卸载gym再安装制定版本gym（0.9.5）：</p>
<pre><code>pip uninstall gym
pip install gym==0.9.5
</code></pre>
<p>关于前文提到的冲突问题 不用担心 我们不使用pip install方式安装 也不使用官方推荐的docker方式安装 所以在环境限制上比这两种要宽泛的多</p>
<h2 id="安装完后加载官方检测实例的时候出现的问题">安装完后加载官方检测实例的时候出现的问题</h2>
<p>注意 在安装完成之后使用</p>
<pre><code>import universe
</code></pre>
<p>是不能完全解决全部问题的 你依旧无法运行官方提供的示例代码</p>
<pre><code>import gym
import universe  # register the universe environments

env = gym.make('flashgames.DuskDrive-v0')
env.configure(remotes=1)  # automatically creates a local docker container
observation_n = env.reset()

while True:
  action_n = [[('KeyEvent', 'ArrowUp', True)] for ob in observation_n]  # your agent here
  observation_n, reward_n, done_n, info = env.step(action_n)
  env.render()
</code></pre>
<p>你可能会遇见以下各类错误中的一个或者多个：</p>
<pre><code>1.ConnectionRefusedError: [Errno 61] Connection refused
2.requests.packages.urllib3.exceptions.ProtocolError: ('Connection aborted.', ConnectionRefusedError(61, 'Connection refused'))
3.equests.exceptions.ConnectionError: ('Connection aborted.', ConnectionRefusedError(61, 'Connection refused'))
4.AttributeError: 'VNCEnv' object has no attribute 'remote_manager'
5.404连接错误信息
6.502Gateway报错信息
......
</code></pre>
<p>诸如上述错误发生时请查看自己是否有在魔法上网 如果没有请确认上网后再重试（是的Attribute Error错误也和此有关）</p>
<p>另外这个操作极其需要等待时间 完全不像官方Guide上说的“several minutes” 所以在验证期间大可以去做些别的什么比如刷刷YouTube刷刷推之类的……（</p>
]]></content>
    </entry>
</feed>